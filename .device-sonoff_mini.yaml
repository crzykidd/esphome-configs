# Start config for Sonoff mini Configuration

esphome:
  name: $devicename
  platform: ESP8266
  board: esp01_1m

logger:

# tasmota template: {"NAME":"Sonoff Mini","GPIO":[17,0,0,0,9,0,0,0,21,56,0,0,255],"FLAG":0,"BASE":1}
# tasmota template decoded: GPIO: GPIO00 17 Button1, GPIO04 9 Switch1, GPIO12 21 Relay1, GPIO13 56 Led1i, GPIO16 255 userdef; BASE: Sonoff Basic

status_led:
  pin:
    number: GPIO13
    inverted: true

binary_sensor:
  - platform: gpio
    pin: GPIO00
    id: reset
    internal: true
    filters:
      - invert:
      - delayed_off: 10ms
    on_press:
      - switch.toggle: 
          id: relay_1

  - platform: gpio
    name: "$hassname switch"
    pin: GPIO04
    id: switch_1
    on_press:
      then:
        - switch.turn_on:
            id: relay_1
    on_release:
      then:
        - switch.turn_off:
            id: relay_1
  - platform: status   #Get Current status of API connection
    name: $hassname Status

switch:
  - platform: gpio
    name: "$hassname"
    pin: GPIO12
    id: relay_1
    restore_mode: $restore_mode
  - platform: restart    #Adds a reboot switch in Home Assistant to power cycle the device
    name: $hassname Reboot
    
sensor:
  - platform: wifi_signal   #Get strength of wifi signal
    name: $hassname WiFi Signal
    update_interval: 60s
    
  - platform: uptime
    id: uptime_sensor     #gets uptime in human readable format
    name: $hassname uptime in seconds
    update_interval: 30s
    on_raw_value:  # lambda code converts seconds to friendly format
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();
text_sensor:
  - platform: template
    name: $hassname Friendly Uptime  #Human Readable format
    id: uptime_human
    entity_category: diagnostic
    icon: mdi:clock-start

  - platform: template
    name: "$hassname Current Time"   #show current time of device
    lambda: |-
      char str[18];
      time_t currTime = id(homeassistant_time).now().timestamp;
      strftime(str, sizeof(str), "%y-%m-%d %H:%M:%S", localtime(&currTime));
      return  { str };
    update_interval: 30s    
    entity_category: diagnostic
    icon: mdi:clock-outline
    
time:
  - platform: homeassistant   #uses Home Assistant as time source
    id: homeassistant_time
    timezone: $timezone
